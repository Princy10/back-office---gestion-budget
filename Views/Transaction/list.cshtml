@model IEnumerable<gestion_budget.Models.Transaction>
@{
    Layout = "_Layout";
}
<div class="card mb-4">
    <div class="card-header">
        <h5>Filtres avancés</h5>
    </div>
    <div class="card-body">
        <form id="filterForm" class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Catégorie</label>
                <select class="form-select" id="filterCategory">
                    <option value="">Toutes les catégories</option>
                    @foreach (var subcategory in (List<gestion_budget.Models.Category>)ViewBag.subcategories)
                    {
                        <option value="@subcategory.CategoryId">@subcategory.Name</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Type</label>
                <select class="form-select" id="filterType">
                    <option value="">Tous les types</option>
                    <option value="true">Revenu</option>
                    <option value="false">Dépense</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Date début</label>
                <input type="date" class="form-control" id="filterStartDate">
            </div>
            <div class="col-md-3">
                <label class="form-label">Date fin</label>
                <input type="date" class="form-control" id="filterEndDate">
            </div>
            <div class="col-md-3">
                <label class="form-label">Montant minimum</label>
                <input type="number" class="form-control" id="filterMinAmount" value="0">
            </div>
            <div class="col-md-3">
                <label class="form-label">Montant maximum</label>
                <input type="number" class="form-control" id="filterMaxAmount" value="0">
            </div>
            <div class="col-12">
                <button type="button" class="btn btn-primary" onclick="applyFilters()">Appliquer les filtres</button>
                <button type="button" class="btn btn-secondary" onclick="resetFilters()">Réinitialiser</button>
            </div>
        </form>
    </div>
</div>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Catégorie</th>
            <th>Type</th>
            <th>Montant</th>
            <th>Date</th>
            <th>Note</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in Model)
        {
            <tr>
                <td>@transaction.Category.Name</td>
                <td>@(transaction.Category.IsIncome ? "Revenu" : "Dépense")</td>
                <td>
                    @if (transaction.Category.IsIncome)
                    {
                        <span class="text-success">+@transaction.Amount.ToString("N0") Ar</span>
                    }
                    else
                    {
                        <span class="text-danger">-@transaction.Amount.ToString("N0") Ar</span>
                    }
                </td>
                <td>@transaction.TransactionDate.ToString("dd-MM-yyyy HH:mm")</td>
                <td>@transaction.Note</td>
                <td>
                    <button class="btn btn-primary btn-sm" onclick="updateTransaction(@transaction.TransactionId)">Modifier</button>
                    <button class="btn btn-danger btn-sm" onclick="deleteTransaction(@transaction.TransactionId)">Supprimer</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="pagination">
    @for (int i = 1; i <= ViewBag.TotalPages; i++)
    {
        <a class="btn @(i == ViewBag.CurrentPage ? "btn-primary" : "btn-secondary")" href="@Url.Action("List", "Transaction", new { page = i, pageSize = ViewBag.PageSize })">
            @i
        </a>
    }
</div>
<br />
<button class="btn btn-success" onclick="window.location='@Url.Action("Add", "Transaction")'">
    Ajouter une Transaction
</button>

<script>
    async function updateTransaction(transactionId) {
        try {
            const response = await fetch(`/Transaction/GetById/${transactionId}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                }
            });
            if (!response.ok) {
                const error = await response.json();
                console.error("Erreur lors de la récupération des données :", error);
                alert("Une erreur s'est produite. Veuillez réessayer.");
                return;
            }
            window.location.href = `/Transaction/Edit/${transactionId}`;
        } catch (err) {
            console.error("Erreur lors de la requête :", err);
            alert("Une erreur réseau s'est produite. Veuillez vérifier votre connexion.");
        }
    }

    async function deleteTransaction(transactionId) {
        const confirmDelete = confirm("Êtes-vous sûr de vouloir supprimer cette transaction ?");
        if (!confirmDelete) {
            return;
        }
        try {
            const response = await fetch(`/Transaction/Delete/${transactionId}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                }
            });
            if (response.ok) {
                location.reload();
            } else {
                const error = await response.json();
                console.error("Erreur lors de la suppression :", error);
                alert("Une erreur s'est produite. Veuillez réessayer.");
            }
        } catch (err) {
            console.error("Erreur lors de la requête :", err);
            alert("Une erreur réseau s'est produite. Veuillez vérifier votre connexion.");
        }
    }

    function applyFilters() {
        const category = document.getElementById('filterCategory').value;
        const type = document.getElementById('filterType').value;
        const startDate = document.getElementById('filterStartDate').value;
        const endDate = document.getElementById('filterEndDate').value;
        const minAmount = document.getElementById('filterMinAmount').value;
        const maxAmount = document.getElementById('filterMaxAmount').value;

        console.log("Filtres appliqués :");
        console.log("Catégorie :", category);
        console.log("Type :", type);
        console.log("Date début :", startDate);
        console.log("Date fin :", endDate);
        console.log("Montant minimum :", minAmount);
        console.log("Montant maximum :", maxAmount);

        fetch("/Transaction/List", {
            method: "GET",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                category: category,
                type: type,
                startDate: startDate,
                endDate: endDate,
                minAmount: minAmount,
                maxAmount: maxAmount
            })
        })
        .then(response => response.json())
        .then(data => {
            console.log("Réponse du serveur :", data);
        })
        .catch(error => {
            console.error("Erreur lors de la récupération des transactions :", error);
        });
    }
</script>
